function renderCatalog() {
  const grid = document.getElementById('catalogGrid');
  if (!grid || !window.products) return;

  grid.innerHTML = window.products.map(prod => `
    <section class="product-section" id="product-${prod.id}">
      <h2 class="prod-title">${prod.name}</h2>
      <div class="prod-desc">${prod.description}</div>

      <h3>${prod.apply_title}</h3>
      <div class="prod-apply">${prod.apply_description}</div>

      <h3>${prod.parameters_title}</h3>
      <ul class="prod-params">
        ${prod.parameters.map(p => `<li>${p}</li>`).join('')}
      </ul>

      <div class="sub-grid limited" data-prod-id="${prod.id}">
        ${prod.products_list.map((sub, idx) => `
          <article class="sub-card">
            <div class="slider" data-index="${prod.id}-${idx}">
              ${sub.product_photo.map((img, i) => `
                <img src="${img}" alt="${sub.product_name}" class="slide ${i === 0 ? 'active' : ''}">
              `).join('')}

              ${sub.product_photo.length > 1
                ? `
                  <div class="slider-dots">
                    ${sub.product_photo.map((_, i) => `
                      <span class="dot ${i === 0 ? 'active' : ''}" data-slide="${i}"></span>
                    `).join('')}
                  </div>
                `
                : `
                  <div class="slider-dots">
                    <span class="dot-placeholder"></span>
                  </div>
                `}
            </div>

            <h4 class="prod_title">${sub.product_name}</h4>
            <div class="sub-desc">${sub.product_description}</div>

            <button class="toggle-details" data-index="${prod.id}-${idx}">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ <span class="arrow">‚ñº</span></button>
            <div class="sub-details hidden">
              <ul class="sub-params">
                ${sub.product_parameters.map(param => `<li>${param}</li>`).join('')}
              </ul>
            </div>
          </article>
        `).join('')}
      </div>

     ${prod.products_list.length > 3 ? `
  <div class="show-more-wrap">
    <button class="show-more" data-target="${prod.id}" data-state="collapsed">
      –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ü–∏—é
    </button>
  </div>
` : ''}
    </section>
  `).join('');
}

function renderSubmenu() {
  const submenu = document.getElementById('submenuProducts');
  if (!submenu || !window.products) return;

  submenu.innerHTML = window.products.map(p => `
    <a href="#product-${p.id}" data-target="product-${p.id}">${p.name}</a>
  `).join('');
}


menuToggle.addEventListener('click', () => {
  const submenuParent = document.querySelector('.has-submenu');
  if (window.innerWidth <= 860 && submenuParent) {
    if (menu.classList.contains('open')) {
      submenuParent.classList.add('open');
    } else {
      submenuParent.classList.remove('open');
    }
  }
});


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø–æ–¥–º–µ–Ω—é (–ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª)
document.addEventListener('click', e => {
  const link = e.target.closest('.submenu a');
  if (link) {
    e.preventDefault();
    const id = link.dataset.target;
    const section = document.getElementById(id);
    if (section) {
      smoothScrollTo(section, 1400); // ‚Üê –∑–∞–º–µ–Ω–∏–ª–∏ scrollIntoView
    }

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    const submenuWrap = link.closest('.has-submenu');
    if (submenuWrap) submenuWrap.classList.remove('open');
  }
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ)
document.addEventListener('click', e => {
  const catalogBtn = e.target.closest('#menuCatalog');
  if (catalogBtn) {
    e.preventDefault();
    const parent = catalogBtn.closest('.has-submenu');
    parent.classList.toggle('open');
  }
});

document.addEventListener('click', e => {
  // --- –†–∞—Å–∫—Ä—ã—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π ---
 if (e.target.classList.contains('toggle-details')) {
  const btn = e.target;
  const detail = btn.parentElement.querySelector('.sub-details');
  const isOpen = detail.classList.toggle('show');

  // –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–µ–ª–∫—É
	btn.innerHTML = `
  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  <span class="arrow ${isOpen ? 'rotated' : ''}">‚ñº</span>
`;

  return;
}

  // --- –¢–æ—á–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞ ---
  if (e.target.classList.contains('dot')) {
    const dot = e.target;
    const slider = dot.closest('.slider');
    const dots = slider.querySelectorAll('.dot');
    const slides = slider.querySelectorAll('.slide');
    const index = parseInt(dot.dataset.slide);

    slides.forEach((s, i) => s.classList.toggle('active', i === index));
    dots.forEach((d, i) => d.classList.toggle('active', i === index));
    return;
  }

  // --- –ü–æ–∫–∞–∑–∞—Ç—å / —Å–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é ---
  if (e.target.classList.contains('show-more')) {
    const btn = e.target;
    const targetId = btn.dataset.target;
    const grid = document.querySelector(`.sub-grid[data-prod-id="${targetId}"]`);
    if (!grid) return;

    const isCollapsed = btn.dataset.state === 'collapsed';

    if (isCollapsed) {
      // —Ä–∞—Å–∫—Ä—ã—Ç—å
      grid.classList.remove('limited');
      btn.dataset.state = 'expanded';
      btn.textContent = '–°–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é';
    } else {
      // —Å–≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
      grid.classList.add('limited');
      btn.dataset.state = 'collapsed';
      btn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ü–∏—é';
      // –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü–∏–∏
      const section = btn.closest('.product-section');
      if (section) smoothScrollTo(section, 1400); // ‚Üê –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –≤—Ä–µ–º—è
    }
    return;
  }
});



// === –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –º–µ–Ω—é ===
document.addEventListener('click', e => {
  const link = e.target.closest('a[href^="#"]'); // –≤—Å–µ —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  if (!link) return;

  const href = link.getAttribute('href');
  if (href.length <= 1) return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ (#)

  const target = document.querySelector(href);
  if (!target) return;

  // –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
  e.preventDefault();

  // –≤—ã–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
  smoothScrollTo(target, 1400);

  // –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–¥–º–µ–Ω—é ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
  const submenuWrap = link.closest('.has-submenu');
  if (submenuWrap) submenuWrap.classList.remove('open');
});


// === –†–∞–∑–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã ===
async function renderDocuments() {
  const container = document.getElementById('docList');
  if (!container) return;

  const supportedExt = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
  const folder = 'documents/';
  let files = [];

  try {
    // === 1Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å list.json ===
    const res = await fetch(folder + 'list.json');
    if (!res.ok) throw new Error('list.json not found');
    files = await res.json();
    console.log('‚úÖ –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ list.json:', files);
  } catch (err) {
    console.warn('‚ö†Ô∏è fetch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º', err);

    // === 2Ô∏è‚É£ –û—Ñ–ª–∞–π–Ω fallback ===
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø–∞–ø–∫–µ
    const guesses = [
      'price.pdf', 'price2025.pdf', 'catalog.pdf', 'catalog.xlsx', 'price.docx',
      'pricelist.xlsx', 'pricelist.pdf', '–ø—Ä–∞–π—Å.xlsx', '–ø—Ä–∞–π—Å.pdf'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (—á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏-–∑–∞–≥–ª—É—à–∫–∏)
    const checkExistence = await Promise.all(
      guesses.map(name =>
        new Promise(resolve => {
          const test = new Image();
          test.src = folder + name + '?_=' + Date.now();
          test.onload = () => resolve(name);
          test.onerror = () => resolve(null);
        })
      )
    );

    files = checkExistence
      .filter(Boolean)
      .map(name => ({ name, path: folder + name }));
  }

  // === 3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ===
  if (!files || !files.length) {
    container.innerHTML = `<div class="no-docs">–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É</div>`;
    return;
  }

  // === 4Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ===
  container.innerHTML = files.map(file => {
    const ext = file.name.split('.').pop().toLowerCase();
    let type = '';
    switch (ext) {
      case 'pdf': type = 'pdf'; break;
      case 'doc': case 'docx': type = 'doc'; break;
      case 'xls': case 'xlsx': type = 'xls'; break;
      case 'ppt': case 'pptx': type = 'ppt'; break;
      default: type = 'file';
    }
	console.log('üß© file:', file.name, '‚Üí ext:', ext);
    return `
      <a href="${file.path}" class="doc-item" data-type="${type}" download>
        <span class="doc-name">${file.name}</span>
      </a>
    `;
  }).join('');
}


document.addEventListener('DOMContentLoaded', () => {
  renderCatalog();
  renderSubmenu();
  renderDocuments();
});

// === LIGHTBOX —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π ===
let lightboxData = { images: [], current: 0 };

document.addEventListener('click', e => {
  // --- –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ---
  if (e.target.matches('.slide, .sub-photo, .sub-photo-small')) {
    const allImgs = [...e.target.closest('.slider, .sub-card')?.querySelectorAll('.slide, .sub-photo, .sub-photo-small') || []];
    const srcList = allImgs.map(img => img.src);
    const currentIndex = srcList.indexOf(e.target.src);

    lightboxData = { images: srcList, current: currentIndex };

   const lightbox = document.getElementById('lightbox');
const img = document.getElementById('lightbox-img');
const navPrev = lightbox.querySelector('.lightbox-nav.prev');
const navNext = lightbox.querySelector('.lightbox-nav.next');

img.src = e.target.src;
lightbox.classList.add('show');

// üëá —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ–¥–Ω–æ
if (srcList.length <= 1) {
  navPrev.style.display = 'none';
  navNext.style.display = 'none';
} else {
  navPrev.style.display = '';
  navNext.style.display = '';
}

  }

  // --- –ó–∞–∫—Ä—ã—Ç–∏–µ lightbox ---
  if (e.target.matches('.lightbox-close') || e.target.id === 'lightbox') {
    document.getElementById('lightbox').classList.remove('show');
  }

  // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ lightbox ---
  if (e.target.matches('.lightbox-nav')) {
    navigateLightbox(e.target.classList.contains('next') ? 1 : -1);
  }
});

// --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
document.addEventListener('keydown', e => {
  const lightbox = document.getElementById('lightbox');
  if (!lightbox.classList.contains('show')) return;

  if (e.key === 'Escape') {
    lightbox.classList.remove('show');
  } else if (e.key === 'ArrowRight') {
    navigateLightbox(1);
  } else if (e.key === 'ArrowLeft') {
    navigateLightbox(-1);
  }
});

// --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è ---
function navigateLightbox(direction) {
  if (!lightboxData.images.length) return;

  lightboxData.current =
    (lightboxData.current + direction + lightboxData.images.length) %
    lightboxData.images.length;

  const img = document.getElementById('lightbox-img');
  img.src = lightboxData.images[lightboxData.current];
}


// === –í–∫–ª—é—á–∞–µ–º / –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ—É—Ç–µ—Ä–∞ ===
document.addEventListener('DOMContentLoaded', () => {
  const footer = document.querySelector('footer');
  if (!footer) return;

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
        footer.classList.remove('visible');
        void footer.offsetWidth; // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        footer.classList.add('visible');
      } else {
        // –ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –∫–ª–∞—Å—Å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏–ª–æ—Å—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        footer.classList.remove('visible');
      }
    });
  }, { threshold: 0.4 }); // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ñ—É—Ç–µ—Ä –≤–∏–¥–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 40%

  observer.observe(footer);
});
// === –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ ===
document.addEventListener('DOMContentLoaded', () => {
  const copyright = document.querySelector('footer .copyright');
  if (!copyright) return;

  const startYear = 2024; // –ø–µ—Ä–≤—ã–π –≥–æ–¥, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
  const currentYear = new Date().getFullYear();

  if (currentYear === startYear) {
    copyright.textContent = `¬© –û–≤–µ—Ä–¢–æ–ø, ${startYear}`;
  } else {
    copyright.textContent = `¬© –û–≤–µ—Ä–¢–æ–ø, ${startYear}‚Äì${currentYear}`;
  }
});

// === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ ===
function smoothScrollTo(element, duration = 1400) {
  const targetPosition = element.getBoundingClientRect().top + window.scrollY - 80; // –æ—Ç—Å—Ç—É–ø –æ—Ç —à–∞–ø–∫–∏
  const startPosition = window.scrollY;
  const distance = targetPosition - startPosition;
  let startTime = null;

  function animation(currentTime) {
    if (!startTime) startTime = currentTime;
    const timeElapsed = currentTime - startTime;
    const run = easeInOutCubic(timeElapsed, startPosition, distance, duration);
    window.scrollTo(0, run);
    if (timeElapsed < duration) requestAnimationFrame(animation);
  }

  function easeInOutCubic(t, b, c, d) {
    t /= d / 2;
    if (t < 1) return (c / 2) * t * t * t + b;
    t -= 2;
    return (c / 2) * (t * t * t + 2) + b;
  }

  requestAnimationFrame(animation);
}
document.addEventListener('DOMContentLoaded', () => {
  const menu = document.querySelector('.menu');
  const toggle = document.querySelector('.menu-toggle'); // –±—É—Ä–≥–µ—Ä
  const submenuParents = document.querySelectorAll('.has-submenu');

  if (!menu || !toggle) return; // –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ DOM

  // === –ö–ª–∏–∫ –ø–æ –±—É—Ä–≥–µ—Ä—É ===
 toggle.addEventListener('click', () => {
  const isOpening = !menu.classList.contains('open');

  toggle.classList.toggle('open', isOpening);
  menu.classList.toggle('open', isOpening);

  // –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–¥–º–µ–Ω—é "–ü—Ä–æ–¥—É–∫—Ü–∏—è" —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–æ
  if (window.innerWidth <= 860) {
    const submenuParent = document.querySelector('.has-submenu');
    if (submenuParent) {
      if (isOpening) {
        submenuParent.classList.add('open');
      } else {
        submenuParent.classList.remove('open');
      }
    }
  }
});

  // === –ö–ª–∏–∫ –ø–æ –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é (–≤–∫–ª—é—á–∞—è –ø–æ–¥–º–µ–Ω—é) ===
  document.querySelectorAll('.menu a').forEach(link => {
    link.addEventListener('click', e => {
      const parent = link.closest('.has-submenu');

      // –ï—Å–ª–∏ —ç—Ç–æ "–ü—Ä–æ–¥—É–∫—Ü–∏—è" ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é
      if (parent && link.id === 'menuCatalog') {
        e.preventDefault();
        parent.classList.toggle('open');
        return;
      }

      // –ò–Ω–∞—á–µ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë –º–µ–Ω—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
      menu.classList.remove('open');
      toggle.classList.remove('open');
      submenuParents.forEach(p => p.classList.remove('open'));
    });
  });
});
// === –°–í–ê–ô–ü-–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –°–õ–ê–ô–î–ï–†–û–í ===
document.addEventListener('DOMContentLoaded', () => {
  const sliders = document.querySelectorAll('.slider');

  sliders.forEach(slider => {
    let startX = 0;
    let endX = 0;

    slider.addEventListener('touchstart', e => {
      startX = e.touches[0].clientX;
    }, { passive: true });

    slider.addEventListener('touchmove', e => {
      endX = e.touches[0].clientX;
    }, { passive: true });

    slider.addEventListener('touchend', () => {
      const diff = endX - startX;
      if (Math.abs(diff) < 40) return; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–≤–∏–∂–µ–Ω–∏—è

      const slides = slider.querySelectorAll('.slide');
      const dots = slider.querySelectorAll('.dot');
      let activeIndex = [...slides].findIndex(s => s.classList.contains('active'));

      // —Å–≤–∞–π–ø –≤–ª–µ–≤–æ ‚Üí —Å–ª–µ–¥—É—é—â–∞—è
      if (diff < 0) activeIndex++;
      // —Å–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ ‚Üí –ø—Ä–µ–¥—ã–¥—É—â–∞—è
      else activeIndex--;

      if (activeIndex < 0) activeIndex = slides.length - 1;
      if (activeIndex >= slides.length) activeIndex = 0;

      // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–ª–∞–π–¥—ã –∏ —Ç–æ—á–∫–∏
      slides.forEach((s, i) => s.classList.toggle('active', i === activeIndex));
      dots.forEach((d, i) => d.classList.toggle('active', i === activeIndex));
    });
  });
});


